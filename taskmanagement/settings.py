"""
Django settings for taskmanagement project.

Generated by 'django-admin startproject' using Django 1.11.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""
from dotenv import load_dotenv
load_dotenv()
import os
import dj_database_url



# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'default-secret-key')
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', True)
# DEBUG=False

ALLOWED_HOSTS = ['.vercel.app','localhost','127.0.0.1','taskmanagement.herokuapp.com']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'tasks',
    'calendarview',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_celery_beat',
    'vercel',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'taskmanagement.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['./templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'taskmanagement.wsgi.application'

# api/settings.py
# WSGI_APPLICATION = 'api.wsgi.app'
# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases
# enable this when local

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# DATABASES = {
#     'default': dj_database_url.config(conn_max_age=600)
# }
# enable it when hosting online
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': os.getenv('DB_NAME') ,
#         'USER': os.getenv('DB_USER') ,
#         'PASSWORD': os.getenv('DB_PASSWORD') ,
#         'HOST': os.getenv('DB_HOST') ,
#         'PORT': os.getenv('DB_PORT'),
#     }
# }

# settings.py
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/
from pathlib import Path

# Define the base directory
BASE_DIR = Path(__file__).resolve().parent.parent

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / "static"]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# login user setting

LOGIN_REDIRECT_URL = 'task-list'  # Where to redirect after login
LOGOUT_REDIRECT_URL = 'login'  # Where to redirect after logout
LOGIN_URL = 'login'  # URL for @login_required decorator
CRISPY_TEMPLATE_PACK = 'bootstrap5'  #
import redis
CELERY_BROKER_URL = os.getenv('REDIS_SERVER')  # Redis broker URL
CELERY_RESULT_BACKEND = os.getenv('REDIS_SERVER') # Redis result backend
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # For example, using Gmail
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('SERVER_EMAIL')  # Replace with your email
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_PASSWORD') # Replace with your email password



from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    'send-due-date-reminders-every-day': {
        'task': 'tasks.tasks.send_due_date_reminders',
        'schedule': crontab(minute='*/1'),  # Run daily at 8 AM
    },
}


import django_heroku
django_heroku.settings(locals())
